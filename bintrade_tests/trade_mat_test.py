#!/usr/bin/env python# -*- coding:utf-8 -*-# author hongbin@youzan.comimport osimport sysfrom pyspark import SQLContextfrom pyspark import SparkContextimport trade.mat_trade as tradeimport ta.mat_close as matlocal_path = os.path.dirname(__file__)sys.path.append(local_path + "/../lib")os.environ["SPARK_HOME"] = "C:\spark-1.6.1-bin-hadoop2.6"sc = SparkContext('local[1]')sqlContext = SQLContext(sc)sqlContext.setConf( "spark.sql.shuffle.partitions", "1")def trade_test1():    dmat1    = [{"symbol":"AAA", "date":"2016-01-01", "close":1.0, "close_mat":1.0},                {"symbol":"AAA", "date":"2016-01-06", "close":1.2, "close_mat":1.2},                {"symbol":"AAA", "date":"2016-01-02", "close":1.0, "close_mat":1.2},                {"symbol":"AAA", "date":"2016-01-03", "close":1.2, "close_mat":1.3},                {"symbol":"AAA", "date":"2016-01-07", "close":1.1, "close_mat":1.0},                {"symbol":"AAA", "date":"2016-01-04", "close":1.3, "close_mat":1.4},                {"symbol":"AAA", "date":"2016-01-05", "close":1.3, "close_mat":1.3},                ]    dfMat1 = sqlContext.createDataFrame(dmat1)    dfMat1.registerAsTable(mat.get_table_name(5))    dmat2 = [{"symbol":"AAA", "date":"2016-01-01", "close":1.0, "close_mat":1.1},                {"symbol":"AAA", "date":"2016-01-06", "close":1.2,  "close_mat":1.1},                {"symbol":"AAA", "date":"2016-01-02", "close":1.0,  "close_mat":1.1},                {"symbol":"AAA", "date":"2016-01-03", "close":1.2,  "close_mat":1.1},                {"symbol":"AAA", "date":"2016-01-07", "close":1.1,  "close_mat":1.1},                {"symbol":"AAA", "date":"2016-01-04", "close":1.3,  "close_mat":1.1},                {"symbol":"AAA", "date":"2016-01-05", "close":1.3,  "close_mat":1.1},                ]    dfMat2 = sqlContext.createDataFrame(dmat2)    dfMat2.registerAsTable(mat.get_table_name(7))    dfMatDuel = trade.duel(sc, sqlContext, 5, 7)    dfTrade = trade.trade(sc, sqlContext, dfMatDuel)    lMat = dfTrade.collect()    print lMat    assert 11000 == lMat[6]["cash"]    trade.save(sc, sqlContext,dfTrade, 5, 7, isHive=False)    trade.summary(sc, sqlContext, 5, 7)if __name__ == "__main__":    trade_test1()